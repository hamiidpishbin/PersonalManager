services:
  pm.identity:
    image: pm.identity
    container_name: pm.identity
    build:
      context: .
      dockerfile: src/Services/Identity/PM.Identity.Presentation/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "9000:8080"
      - "9090:8081"
    depends_on:
      - pm.keycloak
      - pm.identity.db
        
  pm.dtm.api:
    image: pm.dtm.api
    container_name: pm.dtm.api
    build:
      context: .
      dockerfile: src/Services/DailyTasksManager/PM.DTM.API/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "9001:8080"
      - "9091:8081"
        
  pm.elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: pm.elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
        
  pm.kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: pm.kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://pm.elasticsearch:9200
    ports:
      - "5601:5601"
  
  pm.keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: pm.keycloak
    command:
      - start-dev
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL_HOST=pm.identity.db
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=pm.identity
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
#    volumes:
#      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "18080:8080"
    depends_on:
      - pm.identity.db
  
  pm.identity.db:
    image: postgres:latest
    container_name: pm.identity.db
    environment:
      - POSTGRES_DB=pm.identity
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./kc-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d pm.identity" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  elasticsearch-data: